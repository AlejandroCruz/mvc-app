# -------------------------------------
# Development log file.
# Date period: 10/2016
# Programmer: Alejandro Cruz
# -------------------------------------

# 1/10/2016
- ASP.NET 5 has been renamed to ASP.NET Core 1.0: https://blogs.msdn.microsoft.com/webdev/2016/02/01/an-update-on-asp-net-core-and-net-core/
-- .NET Core can be thought of as a cross-platform version of the .NET Framework
- Entity Framework Core is a data-access technology in the .NET Framework
-- It features a development paradigm called Code First: write the code first, and the database tables are created from this code.
--- Code First allows you to create data model objects by writing simple classes. The database is created from your classes.
- When creating projects requireing dependencies (NuGet Pckg) confirm path to 'Projects' folder for 'Solution'
- Every public method in a controller [Class] is callable as an HTTP endpoint.
-- The returned value is appended to base URL. You set the format for routing in the Startup.cs file:
app.UseMvc(routes =>
{
		routes.MapRoute(
				name: "default",
				template: "{controller=Home}/{action=Index}/{id?}");
});
- When passing parameters MS security to use 'HtmlEncoder.Default.Encode to protect the app from malicious input (namely JavaScript).
- Layout templates allow you to specify the HTML container layout of your site in one place and then apply it across multiple pages in your site.
-- Razor-based view templates:
HTML containers are created in 'Razor' code and added with a "placeholder": eg. @RenderBody()
- Passing Data from the Controller to the View:
Before we go to a database and talk about models, though, let’s first talk about passing information from the controller to a view.
 Controller actions are invoked in response to an incoming URL request. A controller class is where you write the code that handles
 the incoming browser requests, retrieves data from a database, and ultimately decides what type of response to send back to the browser.
 View templates can then be used from a controller to generate and format an HTML response to the browser.

Controllers are responsible for providing whatever data or objects are required in order for a view template to render a response to
 the browser. A best practice: A view template should never perform business logic or interact with a database directly. Instead, a view
 template should work only with the data that’s provided to it by the controller. Maintaining this “separation of concerns” helps keep
 your code clean, testable and more maintainable.
- The Edit, Details, and Delete links are generated by the MVC Core Anchor Tag Helper in the Views/Movies/Index.cshtml file.
- The HttpPostAttribute attribute specifies that this Edit method can be invoked only for POST requests.
-- The Form Tag Helper: The Form Tag Helper generates a hidden anti-forgery token that must match the [ValidateAntiForgeryToken] generated anti-forgery token in the Edit method of the Movies controller.
- When the scaffolding system created the Edit view, it examined the Movie class and created code to render <label> and <input> elements for each property of the class.
- 'GET' operation should be a safe operation that has no side effects and doesn’t modify your persisted data.
- Created Account for Team Services

# 10/3/2016
- Continue tutorial with "Adding a New Field" (https://docs.asp.net/en/latest/tutorials/first-mvc-app/new-field.html#adding-a-new-field)
- For 'dotnet migrations' you have to be in 'src' folder (?)
-- The migrations add command tells the migration framework to examine the current Movie model with the current Movie DB schema and create the necessary code to migrate the DB to the new model.
Naming is arbitrary and is used to name the migration file. It’s helpful to use a meaningful name for the migration step.